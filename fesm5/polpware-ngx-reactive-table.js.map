{"version":3,"file":"polpware-ngx-reactive-table.js","sources":["ng://@polpware/ngx-reactive-table/lib/interfaces.ts","ng://@polpware/ngx-reactive-table/lib/bases/ngx-datatable-powered-base.ts","ng://@polpware/ngx-reactive-table/lib/bases/ngx-datatable-external-data.ts","ng://@polpware/ngx-reactive-table/lib/bases/ngx-datatable-local-data.ts","ng://@polpware/ngx-reactive-table/lib/utils.ts","ng://@polpware/ngx-reactive-table/lib/decors/support-operations.decorator.ts","ng://@polpware/ngx-reactive-table/public-api.ts","ng://@polpware/ngx-reactive-table/polpware-ngx-reactive-table.ts"],"sourcesContent":["import { TemplateRef } from '@angular/core';\r\nimport { SelectionType } from '@swimlane/ngx-datatable';\r\n\r\nexport type HtmlInputTypeEnum = 'text' | 'tel' | 'email' | 'date' | 'number' | 'checkbox';\r\n\r\nexport interface IRowDataType {\r\n    id: any\r\n}\r\n\r\nexport interface IComponentSettings {\r\n    pageSize?: number;\r\n    editable?: boolean;\r\n    rmAsyncHandler?: (data: Array<IRowDataType>) => Promise<any>;\r\n    addOrEditAsyncHandler?: (data: IRowDataType) => Promise<IRowDataType>;\r\n}\r\n\r\nexport const noopPromise = (data: any) => new Promise((resolve, reject) => {\r\n    resolve(data);\r\n});\r\n\r\nexport const rmPromise = (data: Array<IRowDataType>) => new Promise((resolve, reject) => {\r\n    resolve();\r\n});\r\n\r\nexport const addOrEditPromise: (data: IRowDataType) => Promise<IRowDataType> = (data: IRowDataType) => new Promise((resolve, reject) => {\r\n    const newData: IRowDataType = Object.assign(data, { id: new Date().getTime() });\r\n    resolve(newData);\r\n});\r\n\r\n\r\nexport const defaultSettings: IComponentSettings = {\r\n    pageSize: 40,\r\n    editable: false,\r\n    rmAsyncHandler: rmPromise,\r\n    addOrEditAsyncHandler: addOrEditPromise\r\n}\r\n\r\nexport interface ITableColumnSpec {\r\n    name?: string;\r\n    prop?: string;\r\n    width?: number;\r\n    maxWidth?: number;\r\n    minWidth?: number;\r\n    canAutoResize?: boolean;\r\n    draggable?: boolean;\r\n    resizeable?: boolean;\r\n    headerCheckboxable?: boolean;\r\n    checkboxable?: boolean;\r\n    sortable?: boolean;\r\n    headerTemplate?: TemplateRef<any>;\r\n    cellTemplate?: TemplateRef<any>;\r\n    headerClass?: string;\r\n    cellClass?: string;\r\n    editable?: boolean; // editable, not part of the ngx datatable\r\n    inputType?: HtmlInputTypeEnum;\r\n    frozenLeft?: boolean;\r\n    frozenRight?: boolean;\r\n}\r\n\r\nexport interface ISortableColumn {\r\n    prop: string;\r\n    dir: 'asc' | 'desc';\r\n}\r\n\r\nexport interface ISortChangedEvent {\r\n    column: {\r\n        prop: string;\r\n    };\r\n    newValue: 'asc' | 'desc';\r\n}\r\n\r\nexport interface IPageChangedEvent {\r\n    offset: number;\r\n}\r\n\r\nexport interface IReactiveDatableBase<T extends IRowDataType> {\r\n    settings: IComponentSettings;\r\n\r\n    columns: Array<ITableColumnSpec>;\r\n\r\n    rows: Array<T>;\r\n\r\n    pageSize: number;\r\n    loading: boolean;\r\n\r\n    totalCount: number;\r\n    pageIndex: number; // page index\r\n\r\n    sortingKey: string;\r\n    // Describe the init sorting order.\r\n    sorts: Array<ISortableColumn>;\r\n}\r\n\r\nexport interface ITableWithOperationsBase<T extends IRowDataType> extends IReactiveDatableBase<T> {\r\n\r\n    // Support selected\r\n    selected: Array<T>;\r\n    // Suport editing\r\n    editing: { [key: string]: boolean };\r\n    backup: { [key: number]: T };\r\n\r\n    anyEditing: boolean;\r\n\r\n    onSelect(data: { selected: Array<T> }): void;\r\n    startAdd(): void;\r\n    startEdit(rowIndex: number): void;\r\n    cancelEdit(rowIndex: number): void;\r\n    confirmEditAsync(rowIndex: number): Promise<any>;\r\n    updateValue(event: any, prop: string, rowIndex: number): void;\r\n    cleanEditing(rowIndex: number): void;\r\n    rmAsync(): Promise<any>;\r\n}\r\n","import { Input, OnInit } from '@angular/core';\nimport { ColumnMode } from '@swimlane/ngx-datatable';\nimport { defaultSettings, IComponentSettings, IRowDataType, ISortableColumn, ITableColumnSpec, IReactiveDatableBase } from '../interfaces';\n\nexport abstract class NgxDatatablePoweredBase<T extends IRowDataType>\n    implements IReactiveDatableBase<T>, OnInit {\n\n    @Input() settings: IComponentSettings;\n\n    ColumnMode = ColumnMode;\n\n    columns: Array<ITableColumnSpec> = [];\n\n    rows: Array<T> = [];\n\n    pageSize: number = 40;\n    loading: boolean = false;\n\n    totalCount: number = 0;\n    pageIndex: number = 0; // page index\n\n    // We on purpose put the basic for sorting here, because they are required in\n    // supporting operations. \n    // Sorting \n    sortingKey: string = '';\n    // Describe the init sorting order.\n    sorts: Array<ISortableColumn> = [];\n\n    ngOnInit(): void {\n        const settings = Object.assign({}, defaultSettings, this.settings);\n        this.pageSize = settings.pageSize;\n    }\n\n}\n","import { SelectionType } from '@swimlane/ngx-datatable';\r\nimport { IPageChangedEvent, IRowDataType, ISortChangedEvent, ITableWithOperationsBase, noopPromise } from '../interfaces';\r\nimport { NgxDatatablePoweredBase } from './ngx-datatable-powered-base';\r\n\r\nexport abstract class NgxDatatableExternalData<T extends IRowDataType>\r\n    extends NgxDatatablePoweredBase<T> {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    protected abstract buildTableDataAsync(pageIndex: number): Promise<any>;\r\n\r\n    onPageChanged(evt: IPageChangedEvent) {\r\n        this.buildTableDataAsync(evt.offset);\r\n    }\r\n\r\n    refresh() {\r\n        // The other settings stay the same.\r\n        this.buildTableDataAsync(0);\r\n    }\r\n\r\n    abstract onSortChanged(evt: ISortChangedEvent): any;\r\n\r\n}\r\n\r\nexport abstract class NgxDatatableExternalDataWithOperations<T extends IRowDataType>\r\n    extends NgxDatatableExternalData<T>\r\n    implements ITableWithOperationsBase<T> {\r\n\r\n    SelectionType = SelectionType;\r\n\r\n    // Support selected\r\n    selected: Array<T> = [];\r\n    // Suport editing\r\n    editing: { [key: string]: boolean } = {};\r\n    backup: { [key: number]: T } = {};\r\n\r\n    anyEditing: boolean\r\n\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n\r\n    onSelect({ selected }) { }\r\n\r\n    startAdd() { }\r\n\r\n    startEdit(rowIndex: number) { }\r\n\r\n    // Support editing an existing one and adding a new one\r\n    cancelEdit(rowIndex: number) { };\r\n\r\n\r\n    async confirmEditAsync(rowIndex: number) {\r\n        await noopPromise(rowIndex);\r\n    }\r\n\r\n    updateValue(event: any, prop: string, rowIndex: number) { }\r\n\r\n    cleanEditing(rowIndex: number) { }\r\n\r\n    async rmAsync() {\r\n        await noopPromise(null);\r\n    }\r\n\r\n}\r\n","import { SelectionType } from '@swimlane/ngx-datatable';\r\nimport { IRowDataType, ITableWithOperationsBase, noopPromise } from '../interfaces';\r\nimport { NgxDatatablePoweredBase } from './ngx-datatable-powered-base';\r\n\r\n// Dervied classes must use decorator to provide implementation\r\nexport abstract class NgxDatatableLocalData<T extends IRowDataType>\r\n    extends NgxDatatablePoweredBase<T> implements ITableWithOperationsBase<T> {\r\n\r\n    SelectionType = SelectionType;\r\n\r\n    // Support selected\r\n    selected: Array<T> = [];\r\n    // Suport editing\r\n    editing: { [key: string]: boolean } = {};\r\n    backup: { [key: number]: T } = {};\r\n\r\n    anyEditing: boolean\r\n\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n\r\n    onSelect({ selected }) { }\r\n\r\n    startAdd() { }\r\n\r\n    startEdit(rowIndex: number) { }\r\n\r\n    // Support editing an existing one and adding a new one\r\n    cancelEdit(rowIndex: number) { };\r\n\r\n\r\n    async confirmEditAsync(rowIndex: number) {\r\n        await noopPromise(rowIndex);\r\n    }\r\n\r\n    updateValue(event: any, prop: string, rowIndex: number) { }\r\n\r\n    cleanEditing(rowIndex: number) { }\r\n\r\n    async rmAsync() {\r\n        await noopPromise(null);\r\n    }\r\n\r\n}\r\n","import { HtmlInputTypeEnum } from './interfaces';\r\n\r\n/**\r\n * Returns a slice of array (with value semantics) [fromIndex, endIndex]\r\n * @param data\r\n * @param fromIndex\r\n * @param endIndex\r\n */\r\nexport function sliceArray(data: Array<any>, fromIndex: number, endIndex: number) {\r\n    return data.filter((_, index) => {\r\n        return index >= fromIndex && index <= endIndex;\r\n    });\r\n}\r\n\r\nexport function countProperties(obj: Object) {\r\n    let count = 0;\r\n    for (var prop in obj) {\r\n        if (obj.hasOwnProperty(prop)) {\r\n            ++count;\r\n        }\r\n    }\r\n    return count;\r\n}\r\n\r\nexport function getInputType(data: any): HtmlInputTypeEnum {\r\n    const ty = typeof data;\r\n    if (ty == 'number') {\r\n        return 'number';\r\n    }\r\n    if (ty == 'boolean') {\r\n        return 'checkbox';\r\n    }\r\n    if (ty == 'object') {\r\n        if (data instanceof Date) {\r\n            return 'date';\r\n        }\r\n    }\r\n    return 'text';\r\n}\r\n\r\nexport function defaultInputTypeValue(t: HtmlInputTypeEnum) {\r\n    if (t == 'number') {\r\n        return 0;\r\n    }\r\n    if (t == 'checkbox') {\r\n        return false;\r\n    }\r\n    return '';\r\n}\r\n","import { IRowDataType, ITableWithOperationsBase } from '../interfaces';\r\nimport { countProperties, defaultInputTypeValue, sliceArray } from '../utils';\r\n\r\ninterface IDecoratorPrerequisite<T extends IRowDataType> extends ITableWithOperationsBase<T> {\r\n}\r\n\r\ntype DecoratorPrerequisiteClass<T extends IRowDataType> = { new(...args: any[]): IDecoratorPrerequisite<T> };\r\n\r\nexport function supportOperationsDecorator<T extends IRowDataType, U extends DecoratorPrerequisiteClass<T>>(constructor: U) {\r\n    return class extends constructor implements ITableWithOperationsBase<T> {\r\n\r\n        get anyEditing() {\r\n            return countProperties(this.backup) > 0;\r\n        }\r\n\r\n        onSelect({ selected }) {\r\n            this.selected.splice(0, this.selected.length);\r\n            this.selected.push(...selected);\r\n        }\r\n\r\n        startAdd() {\r\n            const newElem: any = {\r\n                id: ''\r\n            };\r\n            this.columns.forEach(a => {\r\n                if (a.editable) {\r\n                    newElem[a.prop] = defaultInputTypeValue(a.inputType);\r\n                }\r\n            });\r\n            // Add the element into the rows (no backup)\r\n            this.rows = [newElem, ...this.rows];\r\n            this.totalCount = this.totalCount + 1;\r\n            this.backup[0] = newElem;\r\n            // Enable editing it.\r\n            this.columns.forEach(a => {\r\n                if (a.editable) {\r\n                    this.editing[0 + '-' + a.prop] = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        startEdit(rowIndex: number) {\r\n            const data = this.rows[rowIndex];\r\n            this.backup[rowIndex] = { ...data };\r\n            this.columns.forEach(a => {\r\n                if (a.editable) {\r\n                    this.editing[rowIndex + '-' + a.prop] = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        // Support editing an existing one and adding a new one\r\n        cancelEdit(rowIndex: number) {\r\n            // Replace the old value\r\n            const firstPart = sliceArray(this.rows, 0, rowIndex - 1);\r\n            const secondPart = sliceArray(this.rows, rowIndex + 1, this.rows.length - 1);\r\n            const elem = this.backup[rowIndex];\r\n            // An existing one\r\n            if (elem.id) {\r\n                this.rows = [...firstPart, elem, ...secondPart];\r\n            } else {\r\n                // Otherwise, drop this.\r\n                this.rows = [...firstPart, ...secondPart];\r\n            }\r\n            this.cleanEditing(rowIndex);\r\n            delete this.backup[rowIndex];\r\n        }\r\n\r\n\r\n        async confirmEditAsync(rowIndex: number) {\r\n            const elem = this.rows[rowIndex];\r\n            if (this.settings.addOrEditAsyncHandler) {\r\n                const newElem = await this.settings.addOrEditAsyncHandler(elem);\r\n                // todo: Do we need to update data ????\r\n                const firstPart = sliceArray(this.rows, 0, rowIndex - 1);\r\n                const secondPart = sliceArray(this.rows, rowIndex + 1, this.rows.length - 1);\r\n                this.rows = [...firstPart, newElem, ...secondPart];\r\n            }\r\n            this.cleanEditing(rowIndex);\r\n            delete this.backup[rowIndex];\r\n        }\r\n\r\n        updateValue(event: any, prop: string, rowIndex: number) {\r\n            this.rows[rowIndex][prop] = event.target.value;\r\n        }\r\n\r\n        cleanEditing(rowIndex: number) {\r\n            this.columns.forEach(a => {\r\n                if (a.editable) {\r\n                    delete this.editing[rowIndex + '-' + a.prop];\r\n                }\r\n            });\r\n        }\r\n\r\n        async rmAsync() {\r\n            if (this.settings.rmAsyncHandler) {\r\n                // Expect to be a transaction \r\n                await this.settings.rmAsyncHandler(this.selected);\r\n            }\r\n            // Do not refresh; just delete them from the local set.\r\n            // Update data\r\n            this.rows = this.rows.filter(a => !this.selected.some(b => b === a));\r\n            this.totalCount = this.totalCount - this.selected.length;\r\n            this.selected = [];\r\n        }\r\n\r\n    }\r\n}\r\n","/*\n * Public API Surface of ngx-reactive-table\n */\n\nexport * from './lib/bases/ngx-datatable-external-data';\nexport * from './lib/bases/ngx-datatable-local-data';\nexport * from './lib/bases/ngx-datatable-powered-base';\nexport * from './lib/decors/support-operations.decorator';\nexport * from './lib/interfaces';\nexport * from './lib/utils';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}