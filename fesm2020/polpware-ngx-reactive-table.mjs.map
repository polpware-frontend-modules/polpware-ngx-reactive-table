{"version":3,"file":"polpware-ngx-reactive-table.mjs","sources":["../../../../projects/polpware/ngx-reactive-table/src/lib/interfaces.ts","../../../../projects/polpware/ngx-reactive-table/src/lib/bases/ngx-datatable-powered-base.ts","../../../../projects/polpware/ngx-reactive-table/src/lib/bases/ngx-datatable-external-data.ts","../../../../projects/polpware/ngx-reactive-table/src/lib/bases/ngx-datatable-local-data.ts","../../../../projects/polpware/ngx-reactive-table/src/lib/utils.ts","../../../../projects/polpware/ngx-reactive-table/src/lib/decors/support-operations.decorator.ts","../../../../projects/polpware/ngx-reactive-table/src/lib/decors/has-inline-search.decorator.ts","../../../../projects/polpware/ngx-reactive-table/src/public-api.ts","../../../../projects/polpware/ngx-reactive-table/src/polpware-ngx-reactive-table.ts"],"sourcesContent":["import { TemplateRef } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { INgxNoty } from '@polpware/ngx-noty';\r\nimport { DatatableComponent } from '@swimlane/ngx-datatable';\r\n\r\nexport type HtmlInputTypeEnum = 'text' | 'tel' | 'email' | 'date' | 'number' | 'checkbox' | 'file';\r\n\r\nexport interface IRowDataType {\r\n    id: any\r\n}\r\n\r\nexport interface IComponentSettings {\r\n    pageSize?: number;\r\n    canCreate?: boolean;\r\n    canUpdate?: boolean;\r\n    canDelete?: boolean;\r\n    createAsyncHandler?: (data: IRowDataType) => Promise<IRowDataType>;\r\n    deleteAsyncHandler?: (data: Array<IRowDataType>) => Promise<any>;\r\n    updateAsyncHandler?: (data: IRowDataType) => Promise<IRowDataType>;\r\n}\r\n\r\nexport const noopPromise = (data: any) => new Promise((resolve, reject) => {\r\n    resolve(data);\r\n});\r\n\r\nexport const deletePromise = (data: Array<IRowDataType>) => new Promise((resolve, reject) => {\r\n    resolve(1);\r\n});\r\n\r\nexport const createPromise: (data: IRowDataType) => Promise<IRowDataType> = (data: IRowDataType) => new Promise((resolve, reject) => {\r\n    const newData: IRowDataType = Object.assign({}, data, { id: new Date().getTime() });\r\n    resolve(newData);\r\n});\r\n\r\nexport const updatePromise: (data: IRowDataType) => Promise<IRowDataType> = (data: IRowDataType) => new Promise((resolve, reject) => {\r\n    const newData: IRowDataType = Object.assign({}, data);\r\n    resolve(newData);\r\n});\r\n\r\nexport const defaultSettings: IComponentSettings = {\r\n    pageSize: 40,\r\n    canCreate: false,\r\n    canUpdate: false,\r\n    canDelete: false,\r\n    createAsyncHandler: createPromise,\r\n    updateAsyncHandler: updatePromise,\r\n    deleteAsyncHandler: deletePromise\r\n}\r\n\r\nexport interface ITableColumnSpec {\r\n    name?: string;\r\n    prop?: string;\r\n    width?: number;\r\n    maxWidth?: number;\r\n    minWidth?: number;\r\n    canAutoResize?: boolean;\r\n    draggable?: boolean;\r\n    resizeable?: boolean;\r\n    headerCheckboxable?: boolean;\r\n    checkboxable?: boolean;\r\n    sortable?: boolean;\r\n    headerTemplate?: TemplateRef<any>;\r\n    cellTemplate?: TemplateRef<any>;\r\n    headerClass?: string;\r\n    cellClass?: string;\r\n    editable?: boolean; // editable, not part of the ngx datatable\r\n    inputType?: HtmlInputTypeEnum;\r\n    frozenLeft?: boolean;\r\n    frozenRight?: boolean;\r\n}\r\n\r\nexport interface ISortableColumn {\r\n    prop: string;\r\n    dir: 'asc' | 'desc';\r\n}\r\n\r\nexport interface ISortChangedEvent {\r\n    column: {\r\n        prop: string;\r\n    };\r\n    newValue: 'asc' | 'desc';\r\n}\r\n\r\nexport interface IPageChangedEvent {\r\n    offset: number;\r\n}\r\n\r\nexport interface IReactiveDatableBase<T extends IRowDataType> {\r\n\r\n    datatable: DatatableComponent;\r\n\r\n    settings: IComponentSettings;\r\n\r\n    columns: Array<ITableColumnSpec>;\r\n\r\n    rows: Array<T>;\r\n\r\n    pageSize: number;\r\n    loading: boolean;\r\n\r\n    totalCount: number;\r\n    pageIndex: number; // page index\r\n\r\n    sortingKey: string;\r\n    // Describe the init sorting order.\r\n    sorts: Array<ISortableColumn>;\r\n}\r\n\r\nexport interface ITableDataChangeEvent {\r\n    op: 'create' | 'delete' | 'update' | '',\r\n    data: Array<IRowDataType> | IRowDataType,\r\n    rows: Array<IRowDataType>\r\n}\r\n\r\nexport interface ITableWithOperationsBase<T extends IRowDataType> extends IReactiveDatableBase<T> {\r\n\r\n    // Support selected\r\n    selected: Array<T>;\r\n    // Suport editing\r\n    editing: { [key: string]: boolean };\r\n    backup: { [key: number]: T };\r\n\r\n    anyEditing: boolean;\r\n\r\n    noty: INgxNoty;\r\n\r\n    publish(event: ITableDataChangeEvent): void;\r\n    onSelect(data: { selected: Array<T> }): void;\r\n    startAdd(): void;\r\n    startEdit(rowIndex: number): void;\r\n    cancelEdit(rowIndex: number): void;\r\n    confirmEditAsync(rowIndex: number): Promise<any>;\r\n    updateValue(event: any, prop: string, rowIndex: number): void;\r\n    cleanEditing(rowIndex: number): void;\r\n    rmAsync(): Promise<any>;\r\n}\r\n\r\nexport interface ISearchCapabiltyBuilder {\r\n    // Search control input\r\n    searchControl: FormControl;\r\n\r\n    //\r\n    // This property tracks if there is any keyword \r\n    // which may be applied in the future.\r\n    // E.g., though there is a keyword in effect,\r\n    // a user may enter new keyword in the search input control\r\n    // and the new value is not equal to the current effective\r\n    // keyword. In this case, anyFutureKeyword tells the new value. \r\n    anyFutureKeyword: string;\r\n\r\n    // Start to listen for search keyword change\r\n    startObserveSearchKeyword(): void;\r\n\r\n    stopObserveSearchKeyword(): void;\r\n\r\n    // Cancel typed keyword and\r\n    // reset to whatever the previous state\r\n    //\r\n    // This operation does not cause new network request.\r\n    cancelTypedKeyword(): void;\r\n\r\n    // Starts a new round of search\r\n    //\r\n    // This operation causes new network request.\r\n    kickOffSearch(): void;\r\n}\r\n\r\n/**\r\n * pageIndex starting with 0\r\n */\r\nexport interface IGeneralPagedRequest {\r\n    pageSize: number;\r\n    pageIndex: number; // Starting from 0\r\n}\r\n\r\nexport interface IGeneralPagedResponse<T> {\r\n    totalCount: number;\r\n    items: Array<T>;\r\n}\r\n\r\nexport interface IAbpPagedRequest {\r\n    skipCount?: number;\r\n    maxResultCount?: number;\r\n}\r\n\r\nexport interface IAbpPagedAndSortedRequest extends IAbpPagedRequest {\r\n    sorting?: string;\r\n}\r\n\r\nexport interface IAbpPagedResponse<T> {\r\n    totalCount: number;\r\n    items: Array<T>;\r\n}\r\n\r\nexport function adaptToGeneralPagedRequest(input: IAbpPagedRequest): IGeneralPagedRequest {\r\n    return {\r\n        pageSize: input.maxResultCount,\r\n        pageIndex: Math.floor(input.skipCount / input.maxResultCount)\r\n    };\r\n}\r\n\r\nexport function adaptToAbpPagedRequest(input: IGeneralPagedRequest): IAbpPagedRequest {\r\n    return {\r\n        skipCount: input.pageIndex * input.pageSize,\r\n        maxResultCount: input.pageSize\r\n    };\r\n}\r\n","import { ColumnMode, DatatableComponent } from '@swimlane/ngx-datatable';\nimport { defaultSettings, IComponentSettings, IReactiveDatableBase, IRowDataType, ISortableColumn, ITableColumnSpec } from '../interfaces';\n\nexport abstract class NgxDatatablePoweredBase<T extends IRowDataType>\n    implements IReactiveDatableBase<T> {\n\n    // We on purpose make this one to be abstract,\n    // and thus the dervied must use a viewchild to bind its value.\n    abstract datatable: DatatableComponent;\n\n    // Note that we do not make settings be an input,\n    // becasue the behavior of an input in the abstract base class is not well-defined\n    // Sometime, it works  and sometimes it causes compilation errors.\n    settings: IComponentSettings = defaultSettings;\n\n    ColumnMode = ColumnMode;\n\n    columns: Array<ITableColumnSpec> = [];\n\n    rows: Array<T> = [];\n\n    pageSize: number = defaultSettings.pageSize;\n    loading: boolean = false;\n\n    totalCount: number = 0;\n    pageIndex: number = 0; // page index\n\n    // We on purpose put the basic for sorting here, because they are required in\n    // supporting operations. \n    // Sorting \n    sortingKey: string = '';\n    // Describe the init sorting order.\n    sorts: Array<ISortableColumn> = [];\n}\n","import { INgxNoty } from '@polpware/ngx-noty';\r\nimport { SelectionType } from '@swimlane/ngx-datatable';\r\nimport { IPageChangedEvent, IRowDataType, ISortChangedEvent, ITableDataChangeEvent, ITableWithOperationsBase, noopPromise } from '../interfaces';\r\nimport { NgxDatatablePoweredBase } from './ngx-datatable-powered-base';\r\n\r\nexport abstract class NgxDatatableExternalData<T extends IRowDataType>\r\n    extends NgxDatatablePoweredBase<T> {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    protected abstract buildTableDataAsync(pageIndex: number): Promise<any>;\r\n\r\n    onPageChanged(evt: IPageChangedEvent) {\r\n        this.buildTableDataAsync(evt.offset);\r\n    }\r\n\r\n    onPageSizeChanged(size: number) {\r\n        this.pageSize = size;\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        // The other settings stay the same.\r\n        this.buildTableDataAsync(0);\r\n    }\r\n\r\n    abstract onSortChanged(evt: ISortChangedEvent): any;\r\n\r\n}\r\n\r\nexport abstract class NgxDatatableExternalDataWithOperations<T extends IRowDataType>\r\n    extends NgxDatatableExternalData<T>\r\n    implements ITableWithOperationsBase<T> {\r\n\r\n    SelectionType = SelectionType;\r\n\r\n    // Support selected\r\n    selected: Array<T> = [];\r\n    // Suport editing\r\n    editing: { [key: string]: boolean } = {};\r\n    backup: { [key: number]: T } = {};\r\n\r\n    anyEditing: boolean\r\n\r\n    abstract noty: INgxNoty;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    abstract publish(event: ITableDataChangeEvent): void;\r\n\r\n    onSelect({ selected }) { }\r\n\r\n    startAdd() { }\r\n\r\n    startEdit(rowIndex: number) { }\r\n\r\n    // Support editing an existing one and adding a new one\r\n    cancelEdit(rowIndex: number) { };\r\n\r\n\r\n    async confirmEditAsync(rowIndex: number) {\r\n        await noopPromise(rowIndex);\r\n    }\r\n\r\n    updateValue(event: any, prop: string, rowIndex: number) { }\r\n\r\n    cleanEditing(rowIndex: number) { }\r\n\r\n    async rmAsync() {\r\n        await noopPromise(null);\r\n    }\r\n\r\n}\r\n","import { FormControl } from '@angular/forms';\r\nimport { INgxNoty } from '@polpware/ngx-noty';\r\nimport { SelectionType } from '@swimlane/ngx-datatable';\r\nimport { IRowDataType, ISearchCapabiltyBuilder, ITableDataChangeEvent, ITableWithOperationsBase, noopPromise } from '../interfaces';\r\nimport { NgxDatatablePoweredBase } from './ngx-datatable-powered-base';\r\n\r\n// Dervied classes must use decorator to provide implementation\r\nexport abstract class NgxDatatableLocalData<T extends IRowDataType>\r\n    extends NgxDatatablePoweredBase<T> implements ITableWithOperationsBase<T> {\r\n\r\n    SelectionType = SelectionType;\r\n\r\n    // Support selected\r\n    selected: Array<T> = [];\r\n    // Suport editing\r\n    editing: { [key: string]: boolean } = {};\r\n    backup: { [key: number]: T } = {};\r\n\r\n    anyEditing: boolean\r\n\r\n    abstract noty: INgxNoty;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    abstract publish(event: ITableDataChangeEvent): void;\r\n\r\n    onSelect({ selected }) { }\r\n\r\n    startAdd() { }\r\n\r\n    startEdit(rowIndex: number) { }\r\n\r\n    // Support editing an existing one and adding a new one\r\n    cancelEdit(rowIndex: number) { };\r\n\r\n\r\n    async confirmEditAsync(rowIndex: number) {\r\n        await noopPromise(rowIndex);\r\n    }\r\n\r\n    updateValue(event: any, prop: string, rowIndex: number) { }\r\n\r\n    cleanEditing(rowIndex: number) { }\r\n\r\n    async rmAsync() {\r\n        await noopPromise(null);\r\n    }\r\n}\r\n\r\n\r\n\r\nexport abstract class NgxDatatableLocalDataWithInlineSearch<T extends IRowDataType>\r\n    extends NgxDatatablePoweredBase<T> implements ITableWithOperationsBase<T>, ISearchCapabiltyBuilder {\r\n\r\n    SelectionType = SelectionType;\r\n\r\n    // Support selected\r\n    selected: Array<T> = [];\r\n    // Suport editing\r\n    editing: { [key: string]: boolean } = {};\r\n    backup: { [key: number]: T } = {};\r\n\r\n    anyEditing: boolean\r\n\r\n    abstract noty: INgxNoty;\r\n\r\n    // Support for local filters\r\n    abstract searchControl: FormControl;\r\n    anyFutureKeyword: string;\r\n\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    abstract publish(event: ITableDataChangeEvent): void;\r\n\r\n    onSelect({ selected }) { }\r\n\r\n    startAdd() { }\r\n\r\n    startEdit(rowIndex: number) { }\r\n\r\n    // Support editing an existing one and adding a new one\r\n    cancelEdit(rowIndex: number) { };\r\n\r\n\r\n    async confirmEditAsync(rowIndex: number) {\r\n        await noopPromise(rowIndex);\r\n    }\r\n\r\n    updateValue(event: any, prop: string, rowIndex: number) { }\r\n\r\n    cleanEditing(rowIndex: number) { }\r\n\r\n    async rmAsync() {\r\n        await noopPromise(null);\r\n    }\r\n\r\n    // Support for local filters\r\n    startObserveSearchKeyword(): void { }\r\n    stopObserveSearchKeyword(): void { }\r\n    abstract cancelTypedKeyword(): void;\r\n    abstract kickOffSearch(): void;\r\n\r\n}\r\n","import { HtmlInputTypeEnum } from './interfaces';\r\n\r\n/**\r\n * Returns a slice of array (with value semantics) [fromIndex, endIndex]\r\n * @param data\r\n * @param fromIndex\r\n * @param endIndex\r\n */\r\nexport function sliceArray(data: Array<any>, fromIndex: number, endIndex: number) {\r\n    return data.filter((_, index) => {\r\n        return index >= fromIndex && index <= endIndex;\r\n    });\r\n}\r\n\r\nexport function countProperties(obj: Object) {\r\n    let count = 0;\r\n    for (var prop in obj) {\r\n        if (obj.hasOwnProperty(prop)) {\r\n            ++count;\r\n        }\r\n    }\r\n    return count;\r\n}\r\n\r\nexport function getInputType(data: any): HtmlInputTypeEnum {\r\n    const ty = typeof data;\r\n    if (ty == 'number') {\r\n        return 'number';\r\n    }\r\n    if (ty == 'boolean') {\r\n        return 'checkbox';\r\n    }\r\n    if (ty == 'object') {\r\n        if (data instanceof Date) {\r\n            return 'date';\r\n        }\r\n    }\r\n    return 'text';\r\n}\r\n\r\nexport function defaultInputTypeValue(t: HtmlInputTypeEnum) {\r\n    if (t == 'number') {\r\n        return 0;\r\n    }\r\n    if (t == 'checkbox') {\r\n        return false;\r\n    }\r\n    return '';\r\n}\r\n","import { IRowDataType, ITableWithOperationsBase } from '../interfaces';\r\nimport { countProperties, defaultInputTypeValue, sliceArray } from '../utils';\r\n\r\ninterface IDecoratorPrerequisite<T extends IRowDataType> extends ITableWithOperationsBase<T> {\r\n}\r\n\r\ntype DecoratorPrerequisiteClass<T extends IRowDataType> = { new(...args: any[]): IDecoratorPrerequisite<T> };\r\n\r\nexport function supportOperationsDecorator<T extends IRowDataType, U extends DecoratorPrerequisiteClass<T>>(constructor: U) {\r\n    return class extends constructor implements ITableWithOperationsBase<T> {\r\n\r\n        get anyEditing() {\r\n            return countProperties(this.backup) > 0;\r\n        }\r\n\r\n        onSelect(a: { selected: Array<T> }) {\r\n            if (a && a.selected && Array.isArray(a.selected)) {\r\n                this.selected = [...a.selected];\r\n            }\r\n        }\r\n\r\n        startAdd() {\r\n            const newElem: any = {\r\n                id: ''\r\n            };\r\n            this.columns.forEach(a => {\r\n                if (a.editable) {\r\n                    newElem[a.prop] = defaultInputTypeValue(a.inputType);\r\n                }\r\n            });\r\n            // Disable sorting\r\n            this.sorts = [];\r\n            // Add the element into the rows (no backup)\r\n            this.datatable.rows = [newElem, ...this.datatable._internalRows];\r\n            this.totalCount = this.totalCount + 1;\r\n            this.backup[0] = newElem;\r\n            // Enable editing it.\r\n            this.columns.forEach(a => {\r\n                if (a.editable) {\r\n                    this.editing[0 + '-' + a.prop] = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        startEdit(rowIndex: number) {\r\n            // Disable sorts\r\n            this.sorts = [];\r\n            const data = this.datatable._internalRows[rowIndex];\r\n            this.backup[rowIndex] = { ...data };\r\n            this.columns.forEach(a => {\r\n                if (a.editable) {\r\n                    this.editing[rowIndex + '-' + a.prop] = true;\r\n                }\r\n            });\r\n        }\r\n\r\n        // Support editing an existing one and adding a new one\r\n        cancelEdit(rowIndex: number) {\r\n            // Replace the old value\r\n            const firstPart = sliceArray(this.datatable._internalRows, 0, rowIndex - 1);\r\n            const secondPart = sliceArray(this.datatable._internalRows, rowIndex + 1, this.datatable._internalRows.length - 1);\r\n            const elem = this.backup[rowIndex];\r\n            // An existing one\r\n            if (elem.id) {\r\n                this.rows = [...firstPart, elem, ...secondPart];\r\n            } else {\r\n                // Otherwise, drop this.\r\n                this.rows = [...firstPart, ...secondPart];\r\n            }\r\n            this.cleanEditing(rowIndex);\r\n            delete this.backup[rowIndex];\r\n        }\r\n\r\n\r\n        async confirmEditAsync(rowIndex: number) {\r\n            try {\r\n                const elem = this.datatable._internalRows[rowIndex];\r\n                let newElem: IRowDataType = elem;\r\n                let op: 'create' | 'update' | '' = '';\r\n                if (elem.id) {\r\n                    op = 'update';\r\n                    // Update an existing elment\r\n                    if (this.settings.updateAsyncHandler) {\r\n                        newElem = await this.settings.updateAsyncHandler(elem);\r\n                    }\r\n                } else {\r\n                    op = 'create';\r\n                    // Update an existing elment\r\n                    if (this.settings.createAsyncHandler) {\r\n                        newElem = await this.settings.createAsyncHandler(elem);\r\n                    }\r\n                }\r\n\r\n                // todo: Do we need to update data ????\r\n                const firstPart = sliceArray(this.datatable._internalRows, 0, rowIndex - 1);\r\n                const secondPart = sliceArray(this.datatable._internalRows, rowIndex + 1, this.rows.length - 1);\r\n                this.rows = [...firstPart, newElem, ...secondPart];\r\n\r\n                this.cleanEditing(rowIndex);\r\n                delete this.backup[rowIndex];\r\n\r\n                this.publish({\r\n                    op: op,\r\n                    data: newElem,\r\n                    rows: this.rows\r\n                });\r\n            } catch (e) {\r\n                this.noty.error('Sorry, something went wrong!', 'Operation result');\r\n            }\r\n        }\r\n\r\n        updateValue(event: any, prop: string, rowIndex: number) {\r\n            this.datatable._internalRows[rowIndex][prop] = event.target.value;\r\n        }\r\n\r\n        cleanEditing(rowIndex: number) {\r\n            this.columns.forEach(a => {\r\n                if (a.editable) {\r\n                    delete this.editing[rowIndex + '-' + a.prop];\r\n                }\r\n            });\r\n        }\r\n\r\n        async rmAsync() {\r\n            try {\r\n                if (this.settings.deleteAsyncHandler) {\r\n                    // Expect to be a transaction \r\n                    await this.settings.deleteAsyncHandler(this.selected);\r\n                }\r\n                // This operation preserve sorting\r\n                // Therfore, we on purpose use rows instead of internal rows\r\n\r\n                // Do not refresh; just delete them from the local set.\r\n                // Update data\r\n                this.rows = this.rows.filter(a => !this.selected.some(b => b === a));\r\n                this.totalCount = this.totalCount - this.selected.length;\r\n\r\n                const oldSelected = this.selected;\r\n                this.selected = [];\r\n\r\n                this.noty.success('Data has been deleted successfully!', 'Operation result');\r\n                this.publish({\r\n                    op: 'delete',\r\n                    data: oldSelected,\r\n                    rows: this.rows\r\n                });\r\n            } catch (e) {\r\n                this.noty.error('Sorry, something went wrong!', 'Operation result');\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n","import { Subscription } from 'rxjs';\r\nimport { ISearchCapabiltyBuilder } from '../interfaces';\r\n\r\ninterface IDecoratorPrerequisite extends ISearchCapabiltyBuilder {\r\n}\r\n\r\ntype DecoratorPrerequisiteClass = { new(...args: any[]): IDecoratorPrerequisite };\r\n\r\nexport function hasInlineSearchDecorator<T extends DecoratorPrerequisiteClass>(constructor: T) {\r\n    return class extends constructor implements ISearchCapabiltyBuilder {\r\n\r\n        _searchKeywordSubr: Subscription;\r\n\r\n        // Start to listen for search keyword change\r\n        startObserveSearchKeyword() {\r\n            this._searchKeywordSubr = this.searchControl.valueChanges.subscribe(a => {\r\n                a = (a || '').toLowerCase();\r\n                this.anyFutureKeyword = a;\r\n                this.kickOffSearch();\r\n            });\r\n        }\r\n\r\n        stopObserveSearchKeyword() {\r\n            this._searchKeywordSubr && this._searchKeywordSubr.unsubscribe();\r\n        }\r\n\r\n    }\r\n}\r\n","/*\n * Public API Surface of ngx-reactive-table\n */\n\nexport * from './lib/bases/ngx-datatable-external-data';\nexport * from './lib/bases/ngx-datatable-local-data';\nexport * from './lib/bases/ngx-datatable-powered-base';\nexport * from './lib/decors/support-operations.decorator';\nexport * from './lib/decors/has-inline-search.decorator';\nexport * from './lib/interfaces';\nexport * from './lib/utils';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}