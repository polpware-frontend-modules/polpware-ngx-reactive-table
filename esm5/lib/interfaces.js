export var noopPromise = function (data) { return new Promise(function (resolve, reject) {
    resolve(data);
}); };
export var deletePromise = function (data) { return new Promise(function (resolve, reject) {
    resolve();
}); };
export var createPromise = function (data) { return new Promise(function (resolve, reject) {
    var newData = Object.assign({}, data, { id: new Date().getTime() });
    resolve(newData);
}); };
export var updatePromise = function (data) { return new Promise(function (resolve, reject) {
    var newData = Object.assign({}, data);
    resolve(newData);
}); };
export var defaultSettings = {
    pageSize: 40,
    canCreate: false,
    canUpdate: false,
    canDelete: false,
    createAsyncHandler: createPromise,
    updateAsyncHandler: updatePromise,
    deleteAsyncHandler: deletePromise
};
export function adaptToGeneralPagedRequest(input) {
    return {
        pageSize: input.maxResultCount,
        pageIndex: Math.floor(input.skipCount / input.maxResultCount)
    };
}
export function adaptToAbpPagedRequest(input) {
    return {
        skipCount: input.pageIndex * input.pageSize,
        maxResultCount: input.pageSize
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0Bwb2xwd2FyZS9uZ3gtcmVhY3RpdmUtdGFibGUvIiwic291cmNlcyI6WyJsaWIvaW50ZXJmYWNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxQkEsTUFBTSxDQUFDLElBQU0sV0FBVyxHQUFHLFVBQUMsSUFBUyxJQUFLLE9BQUEsSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtJQUNsRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbEIsQ0FBQyxDQUFDLEVBRndDLENBRXhDLENBQUM7QUFFSCxNQUFNLENBQUMsSUFBTSxhQUFhLEdBQUcsVUFBQyxJQUF5QixJQUFLLE9BQUEsSUFBSSxPQUFPLENBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTtJQUNwRixPQUFPLEVBQUUsQ0FBQztBQUNkLENBQUMsQ0FBQyxFQUYwRCxDQUUxRCxDQUFDO0FBRUgsTUFBTSxDQUFDLElBQU0sYUFBYSxHQUFrRCxVQUFDLElBQWtCLElBQUssT0FBQSxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO0lBQzVILElBQU0sT0FBTyxHQUFpQixNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDcEYsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3JCLENBQUMsQ0FBQyxFQUhrRyxDQUdsRyxDQUFDO0FBRUgsTUFBTSxDQUFDLElBQU0sYUFBYSxHQUFrRCxVQUFDLElBQWtCLElBQUssT0FBQSxJQUFJLE9BQU8sQ0FBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO0lBQzVILElBQU0sT0FBTyxHQUFpQixNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN0RCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDckIsQ0FBQyxDQUFDLEVBSGtHLENBR2xHLENBQUM7QUFFSCxNQUFNLENBQUMsSUFBTSxlQUFlLEdBQXVCO0lBQy9DLFFBQVEsRUFBRSxFQUFFO0lBQ1osU0FBUyxFQUFFLEtBQUs7SUFDaEIsU0FBUyxFQUFFLEtBQUs7SUFDaEIsU0FBUyxFQUFFLEtBQUs7SUFDaEIsa0JBQWtCLEVBQUUsYUFBYTtJQUNqQyxrQkFBa0IsRUFBRSxhQUFhO0lBQ2pDLGtCQUFrQixFQUFFLGFBQWE7Q0FDcEMsQ0FBQTtBQW1KRCxNQUFNLFVBQVUsMEJBQTBCLENBQUMsS0FBdUI7SUFDOUQsT0FBTztRQUNILFFBQVEsRUFBRSxLQUFLLENBQUMsY0FBYztRQUM5QixTQUFTLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUM7S0FDaEUsQ0FBQztBQUNOLENBQUM7QUFFRCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsS0FBMkI7SUFDOUQsT0FBTztRQUNILFNBQVMsRUFBRSxLQUFLLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxRQUFRO1FBQzNDLGNBQWMsRUFBRSxLQUFLLENBQUMsUUFBUTtLQUNqQyxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZvcm1Db250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBJTmd4Tm90eSB9IGZyb20gJ0Bwb2xwd2FyZS9uZ3gtbm90eSc7XHJcbmltcG9ydCB7IERhdGF0YWJsZUNvbXBvbmVudCB9IGZyb20gJ0Bzd2ltbGFuZS9uZ3gtZGF0YXRhYmxlJztcclxuXHJcbmV4cG9ydCB0eXBlIEh0bWxJbnB1dFR5cGVFbnVtID0gJ3RleHQnIHwgJ3RlbCcgfCAnZW1haWwnIHwgJ2RhdGUnIHwgJ251bWJlcicgfCAnY2hlY2tib3gnIHwgJ2ZpbGUnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJUm93RGF0YVR5cGUge1xyXG4gICAgaWQ6IGFueVxyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElDb21wb25lbnRTZXR0aW5ncyB7XHJcbiAgICBwYWdlU2l6ZT86IG51bWJlcjtcclxuICAgIGNhbkNyZWF0ZT86IGJvb2xlYW47XHJcbiAgICBjYW5VcGRhdGU/OiBib29sZWFuO1xyXG4gICAgY2FuRGVsZXRlPzogYm9vbGVhbjtcclxuICAgIGNyZWF0ZUFzeW5jSGFuZGxlcj86IChkYXRhOiBJUm93RGF0YVR5cGUpID0+IFByb21pc2U8SVJvd0RhdGFUeXBlPjtcclxuICAgIGRlbGV0ZUFzeW5jSGFuZGxlcj86IChkYXRhOiBBcnJheTxJUm93RGF0YVR5cGU+KSA9PiBQcm9taXNlPGFueT47XHJcbiAgICB1cGRhdGVBc3luY0hhbmRsZXI/OiAoZGF0YTogSVJvd0RhdGFUeXBlKSA9PiBQcm9taXNlPElSb3dEYXRhVHlwZT47XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBub29wUHJvbWlzZSA9IChkYXRhOiBhbnkpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIHJlc29sdmUoZGF0YSk7XHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IGRlbGV0ZVByb21pc2UgPSAoZGF0YTogQXJyYXk8SVJvd0RhdGFUeXBlPikgPT4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgcmVzb2x2ZSgpO1xyXG59KTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVQcm9taXNlOiAoZGF0YTogSVJvd0RhdGFUeXBlKSA9PiBQcm9taXNlPElSb3dEYXRhVHlwZT4gPSAoZGF0YTogSVJvd0RhdGFUeXBlKSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICBjb25zdCBuZXdEYXRhOiBJUm93RGF0YVR5cGUgPSBPYmplY3QuYXNzaWduKHt9LCBkYXRhLCB7IGlkOiBuZXcgRGF0ZSgpLmdldFRpbWUoKSB9KTtcclxuICAgIHJlc29sdmUobmV3RGF0YSk7XHJcbn0pO1xyXG5cclxuZXhwb3J0IGNvbnN0IHVwZGF0ZVByb21pc2U6IChkYXRhOiBJUm93RGF0YVR5cGUpID0+IFByb21pc2U8SVJvd0RhdGFUeXBlPiA9IChkYXRhOiBJUm93RGF0YVR5cGUpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIGNvbnN0IG5ld0RhdGE6IElSb3dEYXRhVHlwZSA9IE9iamVjdC5hc3NpZ24oe30sIGRhdGEpO1xyXG4gICAgcmVzb2x2ZShuZXdEYXRhKTtcclxufSk7XHJcblxyXG5leHBvcnQgY29uc3QgZGVmYXVsdFNldHRpbmdzOiBJQ29tcG9uZW50U2V0dGluZ3MgPSB7XHJcbiAgICBwYWdlU2l6ZTogNDAsXHJcbiAgICBjYW5DcmVhdGU6IGZhbHNlLFxyXG4gICAgY2FuVXBkYXRlOiBmYWxzZSxcclxuICAgIGNhbkRlbGV0ZTogZmFsc2UsXHJcbiAgICBjcmVhdGVBc3luY0hhbmRsZXI6IGNyZWF0ZVByb21pc2UsXHJcbiAgICB1cGRhdGVBc3luY0hhbmRsZXI6IHVwZGF0ZVByb21pc2UsXHJcbiAgICBkZWxldGVBc3luY0hhbmRsZXI6IGRlbGV0ZVByb21pc2VcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJVGFibGVDb2x1bW5TcGVjIHtcclxuICAgIG5hbWU/OiBzdHJpbmc7XHJcbiAgICBwcm9wPzogc3RyaW5nO1xyXG4gICAgd2lkdGg/OiBudW1iZXI7XHJcbiAgICBtYXhXaWR0aD86IG51bWJlcjtcclxuICAgIG1pbldpZHRoPzogbnVtYmVyO1xyXG4gICAgY2FuQXV0b1Jlc2l6ZT86IGJvb2xlYW47XHJcbiAgICBkcmFnZ2FibGU/OiBib29sZWFuO1xyXG4gICAgcmVzaXplYWJsZT86IGJvb2xlYW47XHJcbiAgICBoZWFkZXJDaGVja2JveGFibGU/OiBib29sZWFuO1xyXG4gICAgY2hlY2tib3hhYmxlPzogYm9vbGVhbjtcclxuICAgIHNvcnRhYmxlPzogYm9vbGVhbjtcclxuICAgIGhlYWRlclRlbXBsYXRlPzogVGVtcGxhdGVSZWY8YW55PjtcclxuICAgIGNlbGxUZW1wbGF0ZT86IFRlbXBsYXRlUmVmPGFueT47XHJcbiAgICBoZWFkZXJDbGFzcz86IHN0cmluZztcclxuICAgIGNlbGxDbGFzcz86IHN0cmluZztcclxuICAgIGVkaXRhYmxlPzogYm9vbGVhbjsgLy8gZWRpdGFibGUsIG5vdCBwYXJ0IG9mIHRoZSBuZ3ggZGF0YXRhYmxlXHJcbiAgICBpbnB1dFR5cGU/OiBIdG1sSW5wdXRUeXBlRW51bTtcclxuICAgIGZyb3plbkxlZnQ/OiBib29sZWFuO1xyXG4gICAgZnJvemVuUmlnaHQ/OiBib29sZWFuO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElTb3J0YWJsZUNvbHVtbiB7XHJcbiAgICBwcm9wOiBzdHJpbmc7XHJcbiAgICBkaXI6ICdhc2MnIHwgJ2Rlc2MnO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElTb3J0Q2hhbmdlZEV2ZW50IHtcclxuICAgIGNvbHVtbjoge1xyXG4gICAgICAgIHByb3A6IHN0cmluZztcclxuICAgIH07XHJcbiAgICBuZXdWYWx1ZTogJ2FzYycgfCAnZGVzYyc7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVBhZ2VDaGFuZ2VkRXZlbnQge1xyXG4gICAgb2Zmc2V0OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVJlYWN0aXZlRGF0YWJsZUJhc2U8VCBleHRlbmRzIElSb3dEYXRhVHlwZT4ge1xyXG5cclxuICAgIGRhdGF0YWJsZTogRGF0YXRhYmxlQ29tcG9uZW50O1xyXG5cclxuICAgIHNldHRpbmdzOiBJQ29tcG9uZW50U2V0dGluZ3M7XHJcblxyXG4gICAgY29sdW1uczogQXJyYXk8SVRhYmxlQ29sdW1uU3BlYz47XHJcblxyXG4gICAgcm93czogQXJyYXk8VD47XHJcblxyXG4gICAgcGFnZVNpemU6IG51bWJlcjtcclxuICAgIGxvYWRpbmc6IGJvb2xlYW47XHJcblxyXG4gICAgdG90YWxDb3VudDogbnVtYmVyO1xyXG4gICAgcGFnZUluZGV4OiBudW1iZXI7IC8vIHBhZ2UgaW5kZXhcclxuXHJcbiAgICBzb3J0aW5nS2V5OiBzdHJpbmc7XHJcbiAgICAvLyBEZXNjcmliZSB0aGUgaW5pdCBzb3J0aW5nIG9yZGVyLlxyXG4gICAgc29ydHM6IEFycmF5PElTb3J0YWJsZUNvbHVtbj47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVRhYmxlRGF0YUNoYW5nZUV2ZW50IHtcclxuICAgIG9wOiAnY3JlYXRlJyB8ICdkZWxldGUnIHwgJ3VwZGF0ZScgfCAnJyxcclxuICAgIGRhdGE6IEFycmF5PElSb3dEYXRhVHlwZT4gfCBJUm93RGF0YVR5cGUsXHJcbiAgICByb3dzOiBBcnJheTxJUm93RGF0YVR5cGU+XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVRhYmxlV2l0aE9wZXJhdGlvbnNCYXNlPFQgZXh0ZW5kcyBJUm93RGF0YVR5cGU+IGV4dGVuZHMgSVJlYWN0aXZlRGF0YWJsZUJhc2U8VD4ge1xyXG5cclxuICAgIC8vIFN1cHBvcnQgc2VsZWN0ZWRcclxuICAgIHNlbGVjdGVkOiBBcnJheTxUPjtcclxuICAgIC8vIFN1cG9ydCBlZGl0aW5nXHJcbiAgICBlZGl0aW5nOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfTtcclxuICAgIGJhY2t1cDogeyBba2V5OiBudW1iZXJdOiBUIH07XHJcblxyXG4gICAgYW55RWRpdGluZzogYm9vbGVhbjtcclxuXHJcbiAgICBub3R5OiBJTmd4Tm90eTtcclxuXHJcbiAgICBwdWJsaXNoKGV2ZW50OiBJVGFibGVEYXRhQ2hhbmdlRXZlbnQpOiB2b2lkO1xyXG4gICAgb25TZWxlY3QoZGF0YTogeyBzZWxlY3RlZDogQXJyYXk8VD4gfSk6IHZvaWQ7XHJcbiAgICBzdGFydEFkZCgpOiB2b2lkO1xyXG4gICAgc3RhcnRFZGl0KHJvd0luZGV4OiBudW1iZXIpOiB2b2lkO1xyXG4gICAgY2FuY2VsRWRpdChyb3dJbmRleDogbnVtYmVyKTogdm9pZDtcclxuICAgIGNvbmZpcm1FZGl0QXN5bmMocm93SW5kZXg6IG51bWJlcik6IFByb21pc2U8YW55PjtcclxuICAgIHVwZGF0ZVZhbHVlKGV2ZW50OiBhbnksIHByb3A6IHN0cmluZywgcm93SW5kZXg6IG51bWJlcik6IHZvaWQ7XHJcbiAgICBjbGVhbkVkaXRpbmcocm93SW5kZXg6IG51bWJlcik6IHZvaWQ7XHJcbiAgICBybUFzeW5jKCk6IFByb21pc2U8YW55PjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJU2VhcmNoQ2FwYWJpbHR5QnVpbGRlciB7XHJcbiAgICAvLyBTZWFyY2ggY29udHJvbCBpbnB1dFxyXG4gICAgc2VhcmNoQ29udHJvbDogRm9ybUNvbnRyb2w7XHJcblxyXG4gICAgLy9cclxuICAgIC8vIFRoaXMgcHJvcGVydHkgdHJhY2tzIGlmIHRoZXJlIGlzIGFueSBrZXl3b3JkIFxyXG4gICAgLy8gd2hpY2ggbWF5IGJlIGFwcGxpZWQgaW4gdGhlIGZ1dHVyZS5cclxuICAgIC8vIEUuZy4sIHRob3VnaCB0aGVyZSBpcyBhIGtleXdvcmQgaW4gZWZmZWN0LFxyXG4gICAgLy8gYSB1c2VyIG1heSBlbnRlciBuZXcga2V5d29yZCBpbiB0aGUgc2VhcmNoIGlucHV0IGNvbnRyb2xcclxuICAgIC8vIGFuZCB0aGUgbmV3IHZhbHVlIGlzIG5vdCBlcXVhbCB0byB0aGUgY3VycmVudCBlZmZlY3RpdmVcclxuICAgIC8vIGtleXdvcmQuIEluIHRoaXMgY2FzZSwgYW55RnV0dXJlS2V5d29yZCB0ZWxscyB0aGUgbmV3IHZhbHVlLiBcclxuICAgIGFueUZ1dHVyZUtleXdvcmQ6IHN0cmluZztcclxuXHJcbiAgICAvLyBTdGFydCB0byBsaXN0ZW4gZm9yIHNlYXJjaCBrZXl3b3JkIGNoYW5nZVxyXG4gICAgc3RhcnRPYnNlcnZlU2VhcmNoS2V5d29yZCgpOiB2b2lkO1xyXG5cclxuICAgIHN0b3BPYnNlcnZlU2VhcmNoS2V5d29yZCgpOiB2b2lkO1xyXG5cclxuICAgIC8vIENhbmNlbCB0eXBlZCBrZXl3b3JkIGFuZFxyXG4gICAgLy8gcmVzZXQgdG8gd2hhdGV2ZXIgdGhlIHByZXZpb3VzIHN0YXRlXHJcbiAgICAvL1xyXG4gICAgLy8gVGhpcyBvcGVyYXRpb24gZG9lcyBub3QgY2F1c2UgbmV3IG5ldHdvcmsgcmVxdWVzdC5cclxuICAgIGNhbmNlbFR5cGVkS2V5d29yZCgpOiB2b2lkO1xyXG5cclxuICAgIC8vIFN0YXJ0cyBhIG5ldyByb3VuZCBvZiBzZWFyY2hcclxuICAgIC8vXHJcbiAgICAvLyBUaGlzIG9wZXJhdGlvbiBjYXVzZXMgbmV3IG5ldHdvcmsgcmVxdWVzdC5cclxuICAgIGtpY2tPZmZTZWFyY2goKTogdm9pZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIHBhZ2VJbmRleCBzdGFydGluZyB3aXRoIDBcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUdlbmVyYWxQYWdlZFJlcXVlc3Qge1xyXG4gICAgcGFnZVNpemU6IG51bWJlcjtcclxuICAgIHBhZ2VJbmRleDogbnVtYmVyOyAvLyBTdGFydGluZyBmcm9tIDBcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJR2VuZXJhbFBhZ2VkUmVzcG9uc2U8VD4ge1xyXG4gICAgdG90YWxDb3VudDogbnVtYmVyO1xyXG4gICAgaXRlbXM6IEFycmF5PFQ+O1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElBYnBQYWdlZFJlcXVlc3Qge1xyXG4gICAgc2tpcENvdW50PzogbnVtYmVyO1xyXG4gICAgbWF4UmVzdWx0Q291bnQ/OiBudW1iZXI7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSUFicFBhZ2VkQW5kU29ydGVkUmVxdWVzdCBleHRlbmRzIElBYnBQYWdlZFJlcXVlc3Qge1xyXG4gICAgc29ydGluZz86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJQWJwUGFnZWRSZXNwb25zZTxUPiB7XHJcbiAgICB0b3RhbENvdW50OiBudW1iZXI7XHJcbiAgICBpdGVtczogQXJyYXk8VD47XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGFwdFRvR2VuZXJhbFBhZ2VkUmVxdWVzdChpbnB1dDogSUFicFBhZ2VkUmVxdWVzdCk6IElHZW5lcmFsUGFnZWRSZXF1ZXN0IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcGFnZVNpemU6IGlucHV0Lm1heFJlc3VsdENvdW50LFxyXG4gICAgICAgIHBhZ2VJbmRleDogTWF0aC5mbG9vcihpbnB1dC5za2lwQ291bnQgLyBpbnB1dC5tYXhSZXN1bHRDb3VudClcclxuICAgIH07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGFwdFRvQWJwUGFnZWRSZXF1ZXN0KGlucHV0OiBJR2VuZXJhbFBhZ2VkUmVxdWVzdCk6IElBYnBQYWdlZFJlcXVlc3Qge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBza2lwQ291bnQ6IGlucHV0LnBhZ2VJbmRleCAqIGlucHV0LnBhZ2VTaXplLFxyXG4gICAgICAgIG1heFJlc3VsdENvdW50OiBpbnB1dC5wYWdlU2l6ZVxyXG4gICAgfTtcclxufVxyXG4iXX0=