import { countProperties, defaultInputTypeValue, sliceArray } from '../utils';
export function supportOperationsDecorator(constructor) {
    return class extends constructor {
        get anyEditing() {
            return countProperties(this.backup) > 0;
        }
        onSelect(a) {
            if (a && a.selected && Array.isArray(a.selected)) {
                this.selected = [...a.selected];
            }
        }
        startAdd() {
            // Disable sorting
            this.sorts = [];
            setTimeout(() => {
                const newElem = {
                    id: ''
                };
                this.columns.forEach(a => {
                    if (a.editable) {
                        newElem[a.prop] = defaultInputTypeValue(a.inputType);
                    }
                });
                // Add the element into the rows (no backup)
                this.datatable.rows = [newElem, ...this.datatable._internalRows];
                this.totalCount = this.totalCount + 1;
                this.backup[0] = newElem;
                // Enable editing it.
                this.columns.forEach(a => {
                    if (a.editable) {
                        this.editing[0 + '-' + a.prop] = true;
                    }
                });
            });
        }
        startEdit(rowIndex) {
            // Disable sorts
            this.sorts = [];
            const data = this.datatable._internalRows[rowIndex];
            this.backup[rowIndex] = { ...data };
            this.columns.forEach(a => {
                if (a.editable) {
                    this.editing[rowIndex + '-' + a.prop] = true;
                }
            });
        }
        // Support editing an existing one and adding a new one
        cancelEdit(rowIndex) {
            // Replace the old value
            const firstPart = sliceArray(this.datatable._internalRows, 0, rowIndex - 1);
            const secondPart = sliceArray(this.datatable._internalRows, rowIndex + 1, this.datatable._internalRows.length - 1);
            const elem = this.backup[rowIndex];
            // An existing one
            if (elem.id) {
                this.rows = [...firstPart, elem, ...secondPart];
            }
            else {
                // Otherwise, drop this.
                this.rows = [...firstPart, ...secondPart];
            }
            this.cleanEditing(rowIndex);
            delete this.backup[rowIndex];
        }
        async confirmEditAsync(rowIndex) {
            try {
                const elem = this.datatable._internalRows[rowIndex];
                let newElem = elem;
                let op = '';
                if (elem.id) {
                    op = 'update';
                    // Update an existing elment
                    if (this.settings.updateAsyncHandler) {
                        newElem = await this.settings.updateAsyncHandler(elem);
                    }
                }
                else {
                    op = 'create';
                    // Update an existing elment
                    if (this.settings.createAsyncHandler) {
                        newElem = await this.settings.createAsyncHandler(elem);
                    }
                }
                // todo: Do we need to update data ????
                const firstPart = sliceArray(this.datatable._internalRows, 0, rowIndex - 1);
                const secondPart = sliceArray(this.datatable._internalRows, rowIndex + 1, this.datatable._internalRows.length - 1);
                this.rows = [...firstPart, newElem, ...secondPart];
                this.cleanEditing(rowIndex);
                delete this.backup[rowIndex];
                this.publish({
                    op: op,
                    data: newElem,
                    rows: this.rows
                });
            }
            catch (e) {
                this.noty.error('Sorry, something went wrong!', 'Operation result');
            }
        }
        updateValue(event, prop, rowIndex) {
            this.datatable._internalRows[rowIndex][prop] = event.target.value;
        }
        cleanEditing(rowIndex) {
            this.columns.forEach(a => {
                if (a.editable) {
                    delete this.editing[rowIndex + '-' + a.prop];
                }
            });
        }
        async rmAsync() {
            try {
                if (this.settings.deleteAsyncHandler) {
                    // Expect to be a transaction 
                    await this.settings.deleteAsyncHandler(this.selected);
                }
                // This operation preserve sorting
                // Therfore, we on purpose use rows instead of internal rows
                // Do not refresh; just delete them from the local set.
                // Update data
                this.rows = this.rows.filter(a => !this.selected.some(b => b === a));
                this.totalCount = this.totalCount - this.selected.length;
                const oldSelected = this.selected;
                this.selected = [];
                this.noty.success('Data has been deleted successfully!', 'Operation result');
                this.publish({
                    op: 'delete',
                    data: oldSelected,
                    rows: this.rows
                });
            }
            catch (e) {
                this.noty.error('Sorry, something went wrong!', 'Operation result');
            }
        }
    };
}
//# sourceMappingURL=data:application/json;base64,