import { Input } from '@angular/core';
import { ColumnMode } from '@swimlane/ngx-datatable';
import * as i0 from "@angular/core";
const defaultSettings = {
    pageSize: 40
};
export class NgxDatatablePoweredBase {
    constructor() {
        this.ColumnMode = ColumnMode;
        this.columns = [];
        this.rows = [];
        this.totalCount = 0;
        this.pageIndex = 0; // page index
        this.pageSize = 40;
        this.loading = false;
        // Sorting 
        this.sortingKey = '';
        // Describe the init sorting order.
        this.sorts = [];
    }
    ngOnInit() {
        const settings = Object.assign({}, defaultSettings, this.settings);
        this.pageSize = settings.pageSize;
    }
    onPageChanged(evt) {
        this.buildTableDataAsync(evt.offset);
    }
    refresh() {
        // The other settings stay the same.
        this.buildTableDataAsync(0);
    }
}
NgxDatatablePoweredBase.ɵfac = function NgxDatatablePoweredBase_Factory(t) { return new (t || NgxDatatablePoweredBase)(); };
NgxDatatablePoweredBase.ɵdir = i0.ɵɵdefineDirective({ type: NgxDatatablePoweredBase, inputs: { settings: "settings" } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWRhdGF0YWJsZS1wb3dlcmVkLWJhc2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AcG9scHdhcmUvbmd4LXJlYWN0aXZlLXRhYmxlLyIsInNvdXJjZXMiOlsibGliL2Jhc2VzL25neC1kYXRhdGFibGUtcG93ZXJlZC1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQXVCLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQzs7QUFpQ3JELE1BQU0sZUFBZSxHQUF1QjtJQUN4QyxRQUFRLEVBQUUsRUFBRTtDQUNmLENBQUE7QUFFRCxNQUFNLE9BQWdCLHVCQUF1QjtJQUE3QztRQUlJLGVBQVUsR0FBRyxVQUFVLENBQUM7UUFFeEIsWUFBTyxHQUFnQyxFQUFFLENBQUM7UUFFMUMsU0FBSSxHQUFhLEVBQUUsQ0FBQztRQUVwQixlQUFVLEdBQVcsQ0FBQyxDQUFDO1FBQ3ZCLGNBQVMsR0FBVyxDQUFDLENBQUMsQ0FBQyxhQUFhO1FBRXBDLGFBQVEsR0FBVyxFQUFFLENBQUM7UUFDdEIsWUFBTyxHQUFZLEtBQUssQ0FBQztRQUV6QixXQUFXO1FBQ1gsZUFBVSxHQUFXLEVBQUUsQ0FBQztRQUN4QixtQ0FBbUM7UUFDbkMsVUFBSyxHQUEyQixFQUFFLENBQUM7S0FtQnRDO0lBakJHLFFBQVE7UUFDSixNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxlQUFlLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ25FLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLFFBQVEsQ0FBQztJQUN0QyxDQUFDO0lBSUQsYUFBYSxDQUFDLEdBQXNCO1FBQ2hDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELE9BQU87UUFDSCxvQ0FBb0M7UUFDcEMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7OzhGQW5DaUIsdUJBQXVCOzREQUF2Qix1QkFBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbnB1dCwgT25Jbml0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29sdW1uTW9kZSB9IGZyb20gJ0Bzd2ltbGFuZS9uZ3gtZGF0YXRhYmxlJztcblxuZXhwb3J0IGludGVyZmFjZSBJQ29tcG9uZW50U2V0dGluZ3Mge1xuICAgIHBhZ2VTaXplPzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElDb2x1bW5Db25maWd1cmF0aW9uIHtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIHByb3A/OiBzdHJpbmc7XG4gICAgd2lkdGg/OiBudW1iZXI7XG4gICAgbWF4V2lkdGg/OiBudW1iZXI7XG4gICAgbWluV2lkdGg/OiBudW1iZXI7XG4gICAgc29ydGFibGU/OiBib29sZWFuO1xuICAgIGhlYWRlclRlbXBsYXRlPzogVGVtcGxhdGVSZWY8YW55PjtcbiAgICBjZWxsVGVtcGxhdGU/OiBUZW1wbGF0ZVJlZjxhbnk+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElTb3J0YWJsZUNvbHVtbiB7XG4gICAgcHJvcDogc3RyaW5nO1xuICAgIGRpcjogJ2FzYycgfCAnZGVzYyc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVNvcnRDaGFuZ2VkRXZlbnQge1xuICAgIGNvbHVtbjoge1xuICAgICAgICBwcm9wOiBzdHJpbmc7XG4gICAgfTtcbiAgICBuZXdWYWx1ZTogJ2FzYycgfCAnZGVzYyc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVBhZ2VDaGFuZ2VkRXZlbnQge1xuICAgIG9mZnNldDogbnVtYmVyO1xufVxuXG5jb25zdCBkZWZhdWx0U2V0dGluZ3M6IElDb21wb25lbnRTZXR0aW5ncyA9IHtcbiAgICBwYWdlU2l6ZTogNDBcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE5neERhdGF0YWJsZVBvd2VyZWRCYXNlPFQ+IGltcGxlbWVudHMgT25Jbml0IHtcblxuICAgIEBJbnB1dCgpIHNldHRpbmdzOiBJQ29tcG9uZW50U2V0dGluZ3M7XG5cbiAgICBDb2x1bW5Nb2RlID0gQ29sdW1uTW9kZTtcblxuICAgIGNvbHVtbnM6IEFycmF5PElDb2x1bW5Db25maWd1cmF0aW9uPiA9IFtdO1xuXG4gICAgcm93czogQXJyYXk8VD4gPSBbXTtcblxuICAgIHRvdGFsQ291bnQ6IG51bWJlciA9IDA7XG4gICAgcGFnZUluZGV4OiBudW1iZXIgPSAwOyAvLyBwYWdlIGluZGV4XG5cbiAgICBwYWdlU2l6ZTogbnVtYmVyID0gNDA7XG4gICAgbG9hZGluZzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgLy8gU29ydGluZyBcbiAgICBzb3J0aW5nS2V5OiBzdHJpbmcgPSAnJztcbiAgICAvLyBEZXNjcmliZSB0aGUgaW5pdCBzb3J0aW5nIG9yZGVyLlxuICAgIHNvcnRzOiBBcnJheTxJU29ydGFibGVDb2x1bW4+ID0gW107XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0U2V0dGluZ3MsIHRoaXMuc2V0dGluZ3MpO1xuICAgICAgICB0aGlzLnBhZ2VTaXplID0gc2V0dGluZ3MucGFnZVNpemU7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGJ1aWxkVGFibGVEYXRhQXN5bmMocGFnZUluZGV4OiBudW1iZXIpOiBQcm9taXNlPGFueT47XG5cbiAgICBvblBhZ2VDaGFuZ2VkKGV2dDogSVBhZ2VDaGFuZ2VkRXZlbnQpIHtcbiAgICAgICAgdGhpcy5idWlsZFRhYmxlRGF0YUFzeW5jKGV2dC5vZmZzZXQpO1xuICAgIH1cblxuICAgIHJlZnJlc2goKSB7XG4gICAgICAgIC8vIFRoZSBvdGhlciBzZXR0aW5ncyBzdGF5IHRoZSBzYW1lLlxuICAgICAgICB0aGlzLmJ1aWxkVGFibGVEYXRhQXN5bmMoMCk7XG4gICAgfVxuXG4gICAgYWJzdHJhY3Qgb25Tb3J0Q2hhbmdlZChldnQ6IElTb3J0Q2hhbmdlZEV2ZW50KTogYW55O1xufVxuIl19