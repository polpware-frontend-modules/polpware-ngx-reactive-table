export const noopPromise = (data) => new Promise((resolve, reject) => {
    resolve(data);
});
export const deletePromise = (data) => new Promise((resolve, reject) => {
    resolve();
});
export const createPromise = (data) => new Promise((resolve, reject) => {
    const newData = Object.assign({}, data, { id: new Date().getTime() });
    resolve(newData);
});
export const updatePromise = (data) => new Promise((resolve, reject) => {
    const newData = Object.assign({}, data);
    resolve(newData);
});
export const defaultSettings = {
    pageSize: 40,
    canCreate: false,
    canUpdate: false,
    canDelete: false,
    createAsyncHandler: createPromise,
    updateAsyncHandler: updatePromise,
    deleteAsyncHandler: deletePromise
};
//# sourceMappingURL=data:application/json;base64,