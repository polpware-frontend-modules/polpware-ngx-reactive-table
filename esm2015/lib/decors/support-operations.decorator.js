import { __awaiter } from "tslib";
import { countProperties, defaultInputTypeValue, sliceArray } from '../utils';
export function supportOperationsDecorator(constructor) {
    return class extends constructor {
        get anyEditing() {
            return countProperties(this.backup) > 0;
        }
        onSelect({ selected }) {
            this.selected.splice(0, this.selected.length);
            this.selected.push(...selected);
        }
        startAdd() {
            const newElem = {
                id: ''
            };
            this.columns.forEach(a => {
                if (a.editable) {
                    newElem[a.prop] = defaultInputTypeValue(a.inputType);
                }
            });
            // Add the element into the rows (no backup)
            this.rows = [newElem, ...this.rows];
            this.totalCount = this.totalCount + 1;
            this.backup[0] = newElem;
            // Enable editing it.
            this.columns.forEach(a => {
                if (a.editable) {
                    this.editing[0 + '-' + a.prop] = true;
                }
            });
        }
        startEdit(rowIndex) {
            const data = this.rows[rowIndex];
            this.backup[rowIndex] = Object.assign({}, data);
            this.columns.forEach(a => {
                if (a.editable) {
                    this.editing[rowIndex + '-' + a.prop] = true;
                }
            });
        }
        // Support editing an existing one and adding a new one
        cancelEdit(rowIndex) {
            // Replace the old value
            const firstPart = sliceArray(this.rows, 0, rowIndex - 1);
            const secondPart = sliceArray(this.rows, rowIndex + 1, this.rows.length - 1);
            const elem = this.backup[rowIndex];
            // An existing one
            if (elem.id) {
                this.rows = [...firstPart, elem, ...secondPart];
            }
            else {
                // Otherwise, drop this.
                this.rows = [...firstPart, ...secondPart];
            }
            this.cleanEditing(rowIndex);
            delete this.backup[rowIndex];
        }
        confirmEditAsync(rowIndex) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const elem = this.rows[rowIndex];
                    let newElem = null;
                    if (this.settings.addOrEditAsyncHandler) {
                        newElem = yield this.settings.addOrEditAsyncHandler(elem);
                        // todo: Do we need to update data ????
                        const firstPart = sliceArray(this.rows, 0, rowIndex - 1);
                        const secondPart = sliceArray(this.rows, rowIndex + 1, this.rows.length - 1);
                        this.rows = [...firstPart, newElem, ...secondPart];
                    }
                    this.cleanEditing(rowIndex);
                    delete this.backup[rowIndex];
                    this.dataChange.emit({
                        op: 'addOrEdit',
                        data: newElem,
                        rows: this.rows
                    });
                }
                catch (e) {
                    this.noty.error('Sorry, something went wrong!', 'Operation result');
                }
            });
        }
        updateValue(event, prop, rowIndex) {
            this.rows[rowIndex][prop] = event.target.value;
        }
        cleanEditing(rowIndex) {
            this.columns.forEach(a => {
                if (a.editable) {
                    delete this.editing[rowIndex + '-' + a.prop];
                }
            });
        }
        rmAsync() {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    if (this.settings.rmAsyncHandler) {
                        // Expect to be a transaction 
                        yield this.settings.rmAsyncHandler(this.selected);
                    }
                    // Do not refresh; just delete them from the local set.
                    // Update data
                    this.rows = this.rows.filter(a => !this.selected.some(b => b === a));
                    this.totalCount = this.totalCount - this.selected.length;
                    const oldSelected = this.selected;
                    this.selected = [];
                    this.noty.success('Data has been deleted successfully!', 'Operation result');
                    this.dataChange.emit({
                        op: 'rm',
                        data: oldSelected,
                        rows: this.rows
                    });
                }
                catch (e) {
                    this.noty.error('Sorry, something went wrong!', 'Operation result');
                }
            });
        }
    };
}
//# sourceMappingURL=data:application/json;base64,